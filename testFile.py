# En este c√≥digo se encuentran las diferentes pruebas realizadas para comprobar el buen funcionamiento de las funciones que se crearon
# en el archivo matrxVectorsLibrary.py
import quantumSystems as qs
import unittest
import math

class TestQuantumSystems(unittest.TestCase):
    def test_marbleSimulation(self):
        self.assertEqual(qs.marbleSimulation([[(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(0,0),(1,0),(0,0),(0,0),(1,0),(0,0)],
            [(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(0,0),(0,0),(0,0),(1,0),(0,0),(0,0)],
            [(0,0),(0,0),(1,0),(0,0),(0,0),(1,0)]],[[(2,0)],[(3,0)],[(0,0)],[(2,0)],[(4,0)],[(1,0)]], 2,1),
    [[(2, 0)], [(0, 0)], [(2, 0)], [(0, 0)], [(0, 0)], [(8, 0)]])
        self.assertEqual(qs.marbleSimulation([[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
            [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0,0),(1,0),(0,0),(0,0),(0,0),(1,0)],
            [(0,0),(0,0),(0,0),(1,0),(0,0),(0,0)], [(0,0),(0,0),(1,0),(0,0),(0,0),(0,0)], [(1,0),(0,0),(0,0),(0,0),(1,0),(0,0)]],
            [[(6,0)],[(2,0)],[(1,0)],[(5,0)],[(3,0)],[(10,0)]],4,2),[[(0, 0)], [(0, 0)], [(12, 0)], [(5, 0)], [(1, 0)], [(9, 0)]])

    def test_rendijaReals(self):
        self.assertEqual(qs.dobleRendijaSimulationReals([[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(1/2,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],
                                    [(1/2,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(0,0),(1/3,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0)],
                                    [(0,0),(1/3,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0)],[(0,0),(1/3,0),(1/3,0),(0,0),(0,0),(1,0),(0,0),(0,0)],
                                    [(0,0),(0,0),(1/3,0),(0,0),(0,0),(0,0),(1,0),(0,0)],[(0,0),(0,0),(1/3,0),(0,0),(0,0),(0,0),(0,0),(1,0)]],1),
                         [[(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.17, 0.0)], [(0.17, 0.0)], [(0.34, 0.0)], [(0.17, 0.0)], [(0.17, 0.0)]])
        self.assertEqual(qs.dobleRendijaSimulationReals([[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(1/6,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],
                [(2/3,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(1/6,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],
                [(0,0),(1/10,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)], [(0,0),(7/10,0),(0,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0),(0,0)],
                [(0,0),(2/10,0),(1/10,0),(0,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0)],[(0,0),(0,0),(4/5,0),(0,0),(0,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0)],
                [(0,0),(0,0),(1/10,0),(2/7,0),(0,0),(0,0),(0,0),(0,0),(1,0),(0,0),(0,0)], [(0,0),(0,0),(0,0),(4/7,0),(0,0),(0,0),(0,0),(0,0),(0,0),(1,0),(0,0)],
                [(0,0),(0,0),(0,0),(1/7,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(1,0)]],2),
                [[(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.02, 0.0)], [(0.12, 0.0)], [(0.1, 0.0)], [(0.54, 0.0)], [(0.12, 0.0)], [(0.1, 0.0)], [(0.02, 0.0)]])

    def test_rendijaQuantics(self):
        self.assertEqual(qs.dobleRendijaSimulationQuantum([[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(1/math.sqrt(2),0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],
                                    [(1/math.sqrt(2),0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(0,0),(-1/math.sqrt(6),1/math.sqrt(6)),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0)],
                                    [(0,0),(-1/math.sqrt(6),-1/math.sqrt(6)),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0)],[(0,0),(1/math.sqrt(6),-1/math.sqrt(6)),(-1/math.sqrt(6),1/math.sqrt(6)),(0,0),(0,0),(1,0),(0,0),(0,0)],
                                    [(0,0),(0,0),(-1/math.sqrt(6),-1/math.sqrt(6)),(0,0),(0,0),(0,0),(1,0),(0,0)],[(0,0),(0,0),(1/math.sqrt(6),-1/math.sqrt(6)),(0,0),(0,0),(0,0),(0,0),(1,0)]],1),
                         [[(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(-0.29, 0.29)], [(-0.29, -0.29)], [(0.0, 0.0)], [(-0.29, -0.29)], [(0.29, -0.29)]])
        self.assertEqual(qs.dobleRendijaSimulationQuantum([[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)], [(0,1/math.sqrt(2)),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)],
                  [(0,1/math.sqrt(2)),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)], [(0,0),(0,-1/math.sqrt(3)), (0,0),(1,0),(0,0),(0,0),(0,0),(0,0)],
                  [(0,0),(0,1/math.sqrt(3)), (0,0),(0,0),(1,0),(0,0),(0,0),(0,0)], [(0,0),(0,-1/math.sqrt(3)), (0,-1/math.sqrt(3)),(0,0),(0,0),(1,0),(0,0),(0,0)],
                  [(0,0),(0,0), (0,1/math.sqrt(3)),(0,0),(0,0),(0,0),(1,0),(0,0)], [(0,0),(0,0), (0,-1/math.sqrt(3)),(0,0),(0,0),(0,0),(0,0),(1,0)]],2),
                [[(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.41, 0.0)], [(-0.41, 0.0)], [(0.82, 0.0)], [(-0.41, 0.0)], [(0.41, 0.0)]])
if __name__ == '__main__':
    unittest.main()